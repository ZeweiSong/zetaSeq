#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Created on Thu Nov 15 10:36:47 2018

Bayesian Inference Of Multi-Alignments on genome SetS (BIOMASS)

This version takes up a lot of memory when alignment get large (> 1M)
--
Coders who love to comment their code are unlikely to have bad luck.

@author: Zewei Song
@email: songzewei@genomics.cn
"""
#%
from __future__ import print_function
from __future__ import division
from zetaSeq import alignment
import argparse
import sys

parser = argparse.ArgumentParser()
parser.add_argument('-a', '--alignment', help='Specify a chain of alignment file(s).')
parser.add_argument('-t', '--taxonomy', help='Taxonomy file of the references.')
parser.add_argument('-o', '--output', help='Output profile in tab delimited-format.')
parser.add_argument('-l', '--level', help='The level to resolve the profile.')
parser.add_argument('-n', '--name', default='Sample', help='The sample name for this profile.')
parser.add_argument('-p', '--permutation', default=2, help='Number of iteration to feedbacl profile.')
args = parser.parse_args()
aln_file    = args.alignment
tax_file    = args.taxonomy
out_file    = args.output
level       = args.level
sample_name = args.name
permute_n   = args.permutation

print('Bayesian Inference Of Multi-Alignments on genome SetS (BIOMASS)')
print('<= Solving multi-hit using Bayesian inference =>')
print('=> Input alignment: {0}'.format(len(aln_file)))
print('=> Taxonomy: {0}'.format(tax_file))
print('=> Reduce at: {0}'.format(level))
print('=> Output to: {0}'.format(out_file))
print('')

# Build the Q-T graph
target_dict = alignment.load_blast6(aln_file, alignment.load_taxonomy(tax_file))
target_dict_nr = alignment.remove_redundant_target(target_dict, threshold=level)

qtGraph = alignment.build_qtgraph(target_dict_nr)
qtGraph = alignment.assign_uniqueness(qtGraph)
qtGraph = alignment.update_query_probability(qtGraph)

# Export final profile
sample_profile = alignment.count_profile(qtGraph)
profile = []
for key, value in sample_profile.items():
    label = ';'.join(key)
    profile.append((label, value))
profile.sort(key = lambda x:x[1], reverse=True)

with open(out_file, 'w') as f:
    f.write('{0}\t{1}\n'.format('BUG', sample_name))
    for item in profile:
        f.write('{0}\t{1}\n'.format(item[0], item[1]))