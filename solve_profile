#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Created on Thu Nov 15 10:36:47 2018

Bayesian Inference Of Multi-Alignments on genome SetS (BIOMASS)

This version takes up a lot of memory when alignment get large (> 1M)
--
Coders who love to comment their code are unlikely to have bad luck.

@author: Zewei Song
@email: songzewei@genomics.cn
"""
#%
from __future__ import print_function
from __future__ import division
from zetaSeq import alignment
import argparse
import sys

parser = argparse.ArgumentParser()
parser.add_argument('-a', '--alignment', \
                    type=argparse.FileType('r'), \
                    nargs='+', \
                    default=sys.stdin, \
                    help='Specify a chain of alignment file(s).')
parser.add_argument('-t', '--taxonomy', help='Taxonomy file of the references.')
parser.add_argument('-o', '--output', help='Output profile in tab delimited-format.')
parser.add_argument('-l', '--level', help='The level to resolve the profile.')
parser.add_argument('-n', '--name', default='Sample', help='The sample name for this profile.')
parser.add_argument('-p', '--permutation', default=2, help='Number of iteration to feedbacl profile.')
args = parser.parse_args()
aln_file    = args.alignment
tax_file    = args.taxonomy
out_file    = args.output
level       = args.level
sample_name = args.name
permute_n   =args.permutation

print('Bayesian Inference Of Multi-Alignments on genome SetS (BIOMASS)')
print('<= Solving multi-hit using Bayesian inference =>')
print('=> Input alignment: {0}'.format(len(aln_file)))
print('=> Taxonomy: {0}'.format(tax_file))
print('=> Reduce at: {0}'.format(level))
print('=> Output to: {0}'.format(out_file))
print('')
# Read in alignment(s) into qt dictionar(ies)
sample_dict = []
for item in aln_file:
    print('Reading: {0}'.format(item))
    sample_dict.append(alignment.qtdict(item, tax_file, threshold=level))

if len(sample_dict) > 1:
    print('Combine all alignments.')
else:
    pass
qtd_combined = alignment.qtdict_combine(sample_dict)
print('')
print('A summary of the final query-target dictionary:')
alignment.qtdict_report(qtd_combined)

# Convert dictionary into qt graph
print('')
print('Convert dictionary into QT graph.')
print('Inference alignment probabilities of all queries.')
qtg = alignment.qtgraph(qtd_combined)

# Calculate uniqueness and solve qt graph into profile
print('')
print('Solve the profile.')
profile = alignment.count_profile(qtg)

# Write the profile into file
print('Write profile into file: {0}'.format(out_file))
with open(out_file, 'w') as f:
    f.write('BUG\t{0}\n'.format(sample_name))
    for key, value in profile.items():
        f.write('{0}\t{1}\n'.format(';'.join(key), value))